name: Build Rent histories

on:
  push:
    branches:
      - dev
      - release

jobs:
  setup_env:
    if: ${{ contains(github.ref, '/heads/dev') || contains(github.ref, '/heads/release') }}
    # TODO: タイミングを見て ubuntu-latest に戻す
    runs-on: ubuntu-20.04
    outputs:
      deploy-env: ${{ steps.set-params.outputs.deploy-env }}
      docker-filename: ${{ steps.set-params.outputs.docker-filename }}
    steps:
      - id: set-params
        run: |
          if [ "${GITHUB_REF}" == 'refs/heads/dev' ];
          then
            echo "::set-output name=deploy-env::dev"
            echo "::set-output name=docker-filename::Dockerfile.development"
          elif [ "${GITHUB_REF}" == 'refs/heads/release' ];
          then
            echo "::set-output name=deploy-env::prd"
            echo "::set-output name=docker-filename::Dockerfile.production"
          fi

  deploy:
    name: Deploy application
    # TODO: タイミングを見て ubuntu-latest に戻す
    runs-on: ubuntu-20.04
    needs:
      - setup_env
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    env:
      ENV: ${{ needs.setup_env.outputs.deploy-env }}
      ECR_REPOSITORY: rent-histories-${{ needs.setup_env.outputs.deploy-env }}
      DOCKER_FILENAME: ${{ needs.setup_env.outputs.docker-filename }}
      IMAGE_TAG: latest
      ECS_SCHEDULE_CONFIG: ./aws/ecschedule/ecschedule-${{ needs.setup_env.outputs.deploy-env }}.yml
      CONTAINER_NAME: rent-histories

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::950851615848:role/data-pipeline-prd-terraform-cd-role
          role-session-name: github-actions-oidc
          aws-region: ap-northeast-1
          # 仕様上900sec以上を指定する必要がある
          role-duration-seconds: 900

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_FILENAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - uses: kayac/ecspresso@v1
        with:
          version: v1.6.0
      - name: Register task definitions
        env:
          ENV: ${{ env.ENV }}
        run: |
          ecspresso register --config aws/ecspresso/ecspresso.yml

      - uses: Songmu/ecschedule@main
        with:
          version: v0.7.1
      - name: Update ECS Scheduled Task
        run: |
          ecschedule -conf ${{ env.ECS_SCHEDULE_CONFIG }} apply -all
